@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Edit Mapping";
}
@if (Model?.accuracyResult?.accuracyRate != null)
{
    <div class="alert alert-info mb-3" id="metricsAlert" style="display:@((Model?.accuracyResult?.accuracyRate != null) ? "block" : "none")">

        @if (Model?.prompts != null && Model.prompts.Any())
        {
            <div class="section">
                <h5>Prompt History</h5>
                <ul>
                    @foreach (var prompt in Model.prompts)
                    {
                        <li>@prompt</li>
                    }
                </ul>
            </div>
        }
        <div class="card shadow-sm border-0 mb-3 modern-metrics-card">
            <div class="card-body p-3">
                <div class="row g-3 align-items-center">
                    <div class="col-12 col-md-4 text-center mb-3 mb-md-0">
                        <div class="display-5 fw-bold text-primary">
                            <i class="bi bi-graph-up-arrow"></i>
                            <span>@Html.DisplayFor(m => m.accuracyResult.accuracyRate)%</span>
                        </div>
                        <div class="fw-semibold">Overall Accuracy</div>
                        <span class="badge @(Model?.accuracyResult?.accuracyRate < 35 ? "bg-danger" : (Model?.accuracyResult?.accuracyRate < 70 ? "bg-warning text-dark" : "bg-success")) px-3 py-2 fs-6 mt-2">
                            @if (Model?.accuracyResult?.accuracyRate < 35)
                            {
                                <i class="bi bi-emoji-frown"></i>
                            }
                            @if (Model?.accuracyResult?.accuracyRate >= 35 && Model?.accuracyResult?.accuracyRate < 70)
                            {
                                <i class="bi bi-emoji-neutral"></i>
                            }
                            @if (Model?.accuracyResult?.accuracyRate >= 70)
                            {
                                <i class="bi bi-emoji-smile"></i>
                            }
                            @Html.DisplayFor(m => m.accuracyResult.accuracyRate)%
                        </span>
                    </div>
                    <div class="col-12 col-md-8">
                        <div class="row g-2">
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Description Similarity</div>
                                <div class="metric-value"><i class="bi bi-file-earmark-text"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.descriptionSimilarity)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">MIMOSA Similarity</div>
                                <div class="metric-value"><i class="bi bi-diagram-3"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.mimosaSimilarity)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Data Type Similarity</div>
                                <div class="metric-value"><i class="bi bi-list-check"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.dataType)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">SAP Similarity</div>
                                <div class="metric-value"><i class="bi bi-diagram-2"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.sapSimilarity)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Field Length Similarity</div>
                                <div class="metric-value"><i class="bi bi-arrows-expand"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.fieldLength)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Missing Fields Rate</div>
                                <div class="metric-value"><i class="bi bi-exclamation-circle"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.infoOmitted)%</strong></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="container mt-4">
    <h2>Edit Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    <form asp-action="Edit" method="post">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="mapID" class="form-label">Map ID</label>
                        <input asp-for="mapID" class="form-control" readonly />
                        <span asp-validation-for="mapID" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="LLMType" class="form-label">LLM Type</label>
                        <input asp-for="LLMType" class="form-control" readonly value="@Model?.LLMType" />
                    </div>
                </div>

            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mappings</h5>
                <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
            </div>
            <div class="card-body" id="mappingsContainer">
                @if (Model.mappings == null || Model.mappings.Count == 0)
                {
                    <div class="alert alert-info" id="noMappingsMessage">
                        No mappings added yet. Click "Add Mapping" to create a mapping pair.
                    </div>
                }
                @if (Model.mappings != null && Model.mappings.Count > 0)
                {
                    ViewData["AccuracyaccuracySingleMappingPair"] = Model.accuracySingleMappingPair;
                    for (int i = 0; i < Model.mappings.Count; i++)
                    {
                        @await Html.PartialAsync("_MappingPair", Tuple.Create(i, Model.mappings[i]), new ViewDataDictionary(ViewData))
                    }
                }
                <div class="alert alert-info" id="noMappingsMessage" style="display: none;">
                    No mappings added yet. Click "Add Mapping" to create a mapping pair.
                </div>
            </div>
        </div>
        <input type="hidden" asp-for="prompt" />
        <input type="hidden" asp-for="accuracyResult.accuracyRate" />
        <input type="hidden" asp-for="accuracyResult.descriptionSimilarity" />
        <input type="hidden" asp-for="accuracyResult.mimosaSimilarity" />
        <input type="hidden" asp-for="accuracyResult.sapSimilarity" />
        <input type="hidden" asp-for="accuracyResult.dataType" />
        <input type="hidden" asp-for="accuracyResult.fieldLength" />
        <input type="hidden" asp-for="accuracyResult.infoOmitted" />
        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    </form>
</div>

<script type="text/template" id="mappingPairTemplate">
    @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
</script>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let mappingIndex = @(Model.mappings?.Count ?? 0);
            const mappingsContainer = document.getElementById('mappingsContainer');
            const noMappingsMessage = document.getElementById('noMappingsMessage');
            const template = document.getElementById('mappingPairTemplate').innerHTML;

            // Add mapping button click handler
            document.getElementById('addMapping').addEventListener('click', function() {
                addMappingPair();
            });

            // Add event listeners to existing remove buttons
            document.querySelectorAll('.remove-mapping').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('.mapping-pair').remove();

                    // Show the "no mappings" message if there are no mappings
                    if (mappingsContainer.querySelectorAll('.mapping-pair').length === 0) {
                        noMappingsMessage.style.display = 'block';
                    }
                });
            });

            // Function to add a new mapping pair
            function addMappingPair() {
                // Hide the "no mappings" message
                noMappingsMessage.style.display = 'none';

                // Create a new mapping pair from template
                const newMapping = template.replace(/{index}/g, mappingIndex);

                // Create a container for the new mapping
                const mappingElement = document.createElement('div');
                mappingElement.innerHTML = newMapping;
                mappingElement.querySelector('.remove-mapping').addEventListener('click', function() {
                    mappingElement.remove();

                    // Show the "no mappings" message if there are no mappings
                    if (mappingsContainer.querySelectorAll('.mapping-pair').length === 0) {
                        noMappingsMessage.style.display = 'block';
                    }
                });

                // Add the new mapping to the container
                mappingsContainer.appendChild(mappingElement);

                // Increment the index for the next mapping
                mappingIndex++;
            }
        });
    </script>
}