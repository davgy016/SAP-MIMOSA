@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Edit Mapping";
}
@if (Model?.accuracyResult?.accuracyRate != null)
{
    <div class="alert alert-info mb-3" id="metricsAlert" style="display:@((Model?.accuracyResult?.accuracyRate != null) ? "block" : "none")">

        @if (Model?.prompts != null && Model.prompts.Any())
        {
            <div class="section">
                <h5>Prompt History</h5>
                <ul>
                    @foreach (var prompt in Model.prompts)
                    {
                        <li>@prompt</li>
                    }
                </ul>
            </div>
        }
        <div class="card shadow-sm border-0 mb-3 modern-metrics-card">
            <div class="card-body p-3">
                <div class="row g-3 align-items-center">
                    <div class="col-12 col-md-4 text-center mb-3 mb-md-0">
                        <div class="display-5 fw-bold text-primary">
                            <i class="bi bi-graph-up-arrow"></i>
                            <span>@Html.DisplayFor(m => m.accuracyResult.accuracyRate)%</span>
                        </div>
                        <div class="fw-semibold">Overall Accuracy</div>
                        <span id="accuracy-badge" class="badge @(Model?.accuracyResult?.accuracyRate < 35 ? "bg-danger" : (Model?.accuracyResult?.accuracyRate < 70 ? "bg-warning text-dark" : "bg-success")) px-3 py-2 fs-6 mt-2">
                            @if (Model?.accuracyResult?.accuracyRate < 35)
                            {
                                <i class="bi bi-emoji-frown"></i>
                            }
                            @if (Model?.accuracyResult?.accuracyRate >= 35 && Model?.accuracyResult?.accuracyRate < 70)
                            {
                                <i class="bi bi-emoji-neutral"></i>
                            }
                            @if (Model?.accuracyResult?.accuracyRate >= 70)
                            {
                                <i class="bi bi-emoji-smile"></i>
                            }
                            @Html.DisplayFor(m => m.accuracyResult.accuracyRate)%
                        </span>
                    </div>
                    <div class="col-12 col-md-8">
                        <div class="row g-2">
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Description Similarity</div>
                                <div class="metric-value"><i class="bi bi-file-earmark-text"></i> <strong data-metric="descriptionSimilarity">@Html.DisplayFor(m => m.accuracyResult.descriptionSimilarity)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">MIMOSA Similarity</div>
                                <div class="metric-value"><i class="bi bi-diagram-3"></i> <strong data-metric="mimosaSimilarity">@Html.DisplayFor(m => m.accuracyResult.mimosaSimilarity)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">Data Type Similarity</div>
                                <div class="metric-value"><i class="bi bi-list-check"></i> <strong data-metric="dataType">@Html.DisplayFor(m => m.accuracyResult.dataType)%</strong></div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="metric-label">SAP Similarity</div>
                                <div class="metric-value"><i class="bi bi-diagram-2"></i> <strong data-metric="sapSimilarity">@Html.DisplayFor(m => m.accuracyResult.sapSimilarity)%</strong></div>
                            </div>
                           
                            <div class="col-12 col-sm-6 ms-auto">
                                <div class="metric-label">Info Omitted</div>
                                <div class="metric-value"><i class="bi bi-exclamation-circle"></i> <strong data-metric="infoOmitted">@Html.DisplayFor(m => m.accuracyResult.infoOmitted)%</strong></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="container mt-4">
    <h2>Edit Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    <form asp-action="Edit" method="post" id="editForm">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="mapID" class="form-label">Map ID</label>
                        <input asp-for="mapID" class="form-control" readonly />
                        <span asp-validation-for="mapID" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="LLMType" class="form-label">LLM Type</label>
                        <input asp-for="LLMType" class="form-control" readonly value="@Model?.LLMType" />
                    </div>
                </div>

            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mappings</h5>
                <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
            </div>
            <div class="card-body" id="mappingsContainer">
                @if (Model.mappings == null || Model.mappings.Count == 0)
                {
                    <div class="alert alert-info" id="noMappingsMessage">
                        No mappings added yet. Click "Add Mapping" to create a mapping pair.
                    </div>
                }
                @if (Model.mappings != null && Model.mappings.Count > 0)
                {
                    ViewData["AccuracyaccuracySingleMappingPair"] = Model.accuracySingleMappingPair;
                    for (int i = 0; i < Model.mappings.Count; i++)
                    {
                        @await Html.PartialAsync("_MappingPair", Tuple.Create(i, Model.mappings[i]), new ViewDataDictionary(ViewData))
                    }
                }
                <div class="alert alert-info" id="noMappingsMessage" style="display: none;">
                    No mappings added yet. Click "Add Mapping" to create a mapping pair.
                </div>
            </div>
        </div>
        <input type="hidden" id="prompts" asp-for="prompts" value="@(Model?.prompts != null ? string.Join(",", Model.prompts) : "")" />
        <input type="hidden" asp-for="accuracyResult.accuracyRate" />
        <input type="hidden" asp-for="accuracyResult.descriptionSimilarity" />
        <input type="hidden" asp-for="accuracyResult.mimosaSimilarity" />
        <input type="hidden" asp-for="accuracyResult.sapSimilarity" />
        <input type="hidden" asp-for="accuracyResult.dataType" />
        <input type="hidden" asp-for="accuracyResult.fieldLength" />
        <input type="hidden" asp-for="accuracyResult.infoOmitted" />
        <input type="hidden" id="accuracySingleMappingPairJson" name="accuracySingleMappingPairJson" value='@Newtonsoft.Json.JsonConvert.SerializeObject(Model?.accuracySingleMappingPair ?? new List<SAP_MIMOSAapp.Models.AccuracyResultViewModel>())' />
        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="button" id="saveChangesBtn" class="btn btn-primary">Save Changes</button>
        </div>
    </form>
</div>

<script type="text/template" id="mappingPairTemplate">
    @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
</script>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let mappingIndex = @(Model.mappings?.Count ?? 0);
            const mappingsContainer = document.getElementById('mappingsContainer');
            const noMappingsMessage = document.getElementById('noMappingsMessage');
            const template = document.getElementById('mappingPairTemplate').textContent || document.getElementById('mappingPairTemplate').innerHTML;
            let formModified = false;
            const editForm = document.getElementById('editForm');

            // Track form modifications
            document.querySelectorAll('form input, form textarea, form select').forEach(input => {
                input.addEventListener('change', () => {
                    formModified = true;
                    recalculateAccuracy();
                });
            });


            document.getElementById('addMapping').addEventListener('click', function() {
                addMappingPair();
                renumberMappings();
                formModified = true;
                recalculateAccuracy();
            });

            // Save changes with confirmation
            document.getElementById('saveChangesBtn').addEventListener('click', function(e) {
                e.preventDefault();
                if (confirm('Are you sure you want to save changes to this mapping document?')) {
                    editForm.submit();
                }
            });

            // Attach remove handler to all mapping pairs
            document.querySelectorAll('.mapping-pair').forEach(attachRemoveHandler);

            // Add event listeners to existing remove buttons
            function attachRemoveHandler(el) {
                el.querySelector('.remove-mapping')?.addEventListener('click', function() {
                    el.remove();
                    renumberMappings();
                    formModified = true;

                    // Show the "no mappings" message if there are no mappings
                    if (mappingsContainer.querySelectorAll('.mapping-pair').length === 0) {
                        noMappingsMessage.style.display = 'block';
                    }

                    recalculateAccuracy();
                });
            }

            // Function to add a new mapping pair
            function addMappingPair(mappingData) {
                noMappingsMessage.style.display = 'none';
                const newMapping = template.replace(/\[@Model\.Item1\]|\[-1\]/g, `[${mappingIndex}]`).replace(/{index}/g, mappingIndex);
                const mappingElement = document.createElement('div');
                mappingElement.innerHTML = newMapping;
                attachRemoveHandler(mappingElement);
                mappingElement.querySelectorAll('input, textarea, select').forEach(input => {
                    input.addEventListener('change', () => {
                        formModified = true;
                        recalculateAccuracy();
                    });
                });

                if (mappingData) {
                    ["sap", "mimosa"].forEach(type => {
                        ["entityName", "fieldName", "dataType", "description", "fieldLength", "notes", "platform"].forEach(field => {
                            const input = mappingElement.querySelector(`[name$=\".${type}.${field}\"]`);
                            if (input && mappingData[type] && mappingData[type][field] !== undefined) {
                                if (input.tagName.toLowerCase() === 'textarea') {
                                    input.textContent = mappingData[type][field];
                                } else {
                                    input.value = mappingData[type][field];
                                }
                            }
                        });
                    });
                }
                mappingsContainer.appendChild(mappingElement);
                mappingIndex++;
                renumberMappings();
            }

            // Renumber mapping input names for proper model binding
            function renumberMappings() {
                document.querySelectorAll('.mapping-pair').forEach((pair, idx) => {
                    pair.querySelectorAll('input, textarea, select').forEach(field => {
                        field.name = field.name.replace(/mappings\[\d+\]/g, `mappings[${idx}]`);
                        if (field.id) {
                            field.id = field.id.replace(/_\d+$/, `_${idx}`);
                        }
                    });
                });
                mappingIndex = document.querySelectorAll('.mapping-pair').length;
            }

            // Gather all mapping data from DOM
            function gatherMappings() {
                const mappings = [];
                document.querySelectorAll('.mapping-pair').forEach(pair => {
                    function getValue(selector) {
                        const el = pair.querySelector(selector);
                        return el ? el.value : '';
                    }
                    mappings.push({
                        sap: {
                            entityName: getValue('[name$=".sap.entityName"]'),
                            fieldName: getValue('[name$=".sap.fieldName"]'),
                            dataType: getValue('[name$=".sap.dataType"]'),
                            description: getValue('[name$=".sap.description"]'),
                            fieldLength: getValue('[name$=".sap.fieldLength"]'),
                            notes: getValue('[name$=".sap.notes"]'),
                            platform: getValue('[name$=".sap.platform"]') || 'SAP'
                        },
                        mimosa: {
                            entityName: getValue('[name$=".mimosa.entityName"]'),
                            fieldName: getValue('[name$=".mimosa.fieldName"]'),
                            dataType: getValue('[name$=".mimosa.dataType"]'),
                            description: getValue('[name$=".mimosa.description"]'),
                            fieldLength: getValue('[name$=".mimosa.fieldLength"]'),
                            notes: getValue('[name$=".mimosa.notes"]'),
                            platform: getValue('[name$=".mimosa.platform"]') || 'MIMOSA'
                        }
                    });
                });
                return mappings;
            }

            // Recalculate accuracy and update hidden fields
            async function recalculateAccuracy() {
                const mappings = gatherMappings();
                if (mappings.length === 0) return;
                try {
                    const response = await fetch('/Home/RecalculateAccuracy', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(mappings)
                    });
                    if (!response.ok) return;
                    const data = await response.json();
                    document.querySelector('[name="accuracyResult.accuracyRate"]').value = data.overall.accuracyRate;
                    document.querySelector('[name="accuracyResult.descriptionSimilarity"]').value = data.overall.descriptionSimilarity;
                    document.querySelector('[name="accuracyResult.mimosaSimilarity"]').value = data.overall.mimosaSimilarity;
                    document.querySelector('[name="accuracyResult.sapSimilarity"]').value = data.overall.sapSimilarity;
                    document.querySelector('[name="accuracyResult.dataType"]').value = data.overall.dataType;
                    document.querySelector('[name="accuracyResult.fieldLength"]').value = data.overall.fieldLength;
                    document.querySelector('[name="accuracyResult.infoOmitted"]').value = data.overall.infoOmitted;
                    const metricsAlert = document.getElementById('metricsAlert');
                    if (metricsAlert) {
                        metricsAlert.style.display = 'block';
                        metricsAlert.querySelector('.display-5 span').textContent = data.overall.accuracyRate + '%';
                        // Update overall metric values using data-metric attributes
                        const overallMetrics = [
                            "descriptionSimilarity",
                            "mimosaSimilarity",
                            "dataType",
                            "sapSimilarity",
                            "fieldLength",
                            "infoOmitted"
                        ];
                        overallMetrics.forEach(metric => {
                            const el = metricsAlert.querySelector(`[data-metric="${metric}"]`);
                            if (el && data.overall[metric] !== null && data.overall[metric] !== undefined) {
                                el.textContent = data.overall[metric] + '%';
                            }
                        });
                        const badge = document.getElementById('accuracy-badge');
                        badge.className = 'badge px-3 py-2 fs-6 mt-2';
                        let badgeIcon = '';
                        if (data.overall.accuracyRate < 35) {
                            badge.classList.add('bg-danger');
                            badgeIcon = '<i class="bi bi-emoji-frown"></i>';
                        } else if (data.overall.accuracyRate < 70) {
                            badge.classList.add('bg-warning', 'text-dark');
                            badgeIcon = '<i class="bi bi-emoji-neutral"></i>';
                        } else {
                            badge.classList.add('bg-success');
                            badgeIcon = '<i class="bi bi-emoji-smile"></i>';
                        }
                        badge.innerHTML = `${badgeIcon} ${data.overall.accuracyRate}%`;
                    }
                    // Update per-mapping pair metrics dynamically
                    if (Array.isArray(data.details)) {
                        data.details.forEach((detail, idx) => {
                            // For each metric in the detail object, update the corresponding span
                            Object.entries(detail).forEach(([key, value]) => {
                                if ([
                                    'descriptionSimilarity',
                                    'sapSimilarity',
                                    'mimosaSimilarity',
                                    'dataType',
                                    'infoOmitted',
                                    'fieldLength'
                                ].includes(key)) {
                                    const selector = `.metric-value[data-metric="${key}"][data-index="${idx}"]`;
                                    const span = document.querySelector(selector);
                                    if (span) span.textContent = (value !== null && value !== undefined) ? value.toFixed(2) + '%' : '';
                                }
                            });
                        });
                    }
                    let accuracySingleMappingPairJson = document.getElementById('accuracySingleMappingPairJson');
                    if (!accuracySingleMappingPairJson) {
                        accuracySingleMappingPairJson = document.createElement('input');
                        accuracySingleMappingPairJson.type = 'hidden';
                        accuracySingleMappingPairJson.id = 'accuracySingleMappingPairJson';
                        accuracySingleMappingPairJson.name = 'accuracySingleMappingPairJson';
                        document.querySelector('form').appendChild(accuracySingleMappingPairJson);
                    }
                    accuracySingleMappingPairJson.value = JSON.stringify(data.details);
                } catch (e) {
                    console.error('Error recalculating accuracy:', e);
                }
            }

            // Add warning when navigating away with unsaved changes
            window.addEventListener('beforeunload', function(e) {
                if (formModified) {
                    const message = 'You have unsaved changes. Are you sure you want to leave?';
                    return message;
                }
            });
        });
    </script>
}
