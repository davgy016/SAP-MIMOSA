@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Create Mapping";
}

<div class="container mt-4">
    <h2>Create New Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }



    <form asp-action="Create" method="post">
        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success">@ViewBag.SuccessMessage</div>
        }
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="ai-mapping-search-area mb-4">
                        @* <div class="search-bar-container d-flex flex-wrap align-items-center shadow-lg rounded-pill px-4 py-3 bg-white position-relative" style=" border: 2px solid #00e6a6; box-shadow: 0 4px 32px 0 #00e6a6aa;"> *@
                        <div class="search-bar-container d-flex align-items-center shadow-lg rounded-pill px-4 py-3 bg-white" style="border: 2px solid #00e6a6; box-shadow: 0 4px 32px 0 #00e6a6aa;">
                            <i class="bi bi-search fs-4 text-primary"></i>
                            <input asp-for="prompt" type="text" id="aiPrompt" class="form-control border-0 bg-transparent fs-5 px-3" placeholder="Enter prompt to generate initial mapping" style="max-width: 445px; background: none; box-shadow: none; outline: none;" readonly data-bs-toggle="modal" data-bs-target="#promptModal" />

                            <!-- Prompt Modal -->
                            <div class="modal fade" id="promptModal" tabindex="-1" aria-labelledby="promptModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="promptModalLabel">Enter Prompt</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <textarea id="modalPromptInput" class="form-control" rows="5" placeholder="Enter prompt to generate initial mapping" style="resize:vertical;"></textarea>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-primary" id="savePromptBtn">Save</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <script>
                                document.addEventListener('DOMContentLoaded', function () {
                                    var aiPrompt = document.getElementById('aiPrompt');
                                    var modalPromptInput = document.getElementById('modalPromptInput');
                                    var savePromptBtn = document.getElementById('savePromptBtn');
                                    var promptModal = document.getElementById('promptModal');

                                    // When modal opens, set value to current input
                                    promptModal.addEventListener('show.bs.modal', function () {
                                        modalPromptInput.value = aiPrompt.value;
                                        setTimeout(function() { modalPromptInput.focus(); }, 300);
                                    });
                                    // Save button updates the main input
                                    savePromptBtn.addEventListener('click', function () {
                                        aiPrompt.value = modalPromptInput.value;
                                        var modal = bootstrap.Modal.getInstance(promptModal);
                                        modal.hide();
                                    });
                                    // Allow pressing Enter in modal input to save
                                    modalPromptInput.addEventListener('keydown', function(e) {
                                        if (e.key === 'Enter') {
                                            e.preventDefault();
                                            savePromptBtn.click();
                                        }
                                    });
                                });
                            </script>
                            <select asp-for="LLMType" id="aiLLMType" class="form-select border-0 bg-transparent fs-6 px-2" style="margin-left: 1.5rem; max-width: 120px; background: none; box-shadow: none; outline: none;">
                                @foreach (var item in SAP_MIMOSAapp.Models.SearchViewModel.AvailableLLMs)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>
                            <button type="button" class="btn btn-gradient-glow d-flex align-items-center gap-1 px-4 py-2 fw-bold fs-5" id="askAiBtn" style="margin-left: 0.8rem; box-shadow: 0 0 18px 2px #00e6a6cc, 0 0 8px 2px #1976D2aa; border-radius: 2rem; background: linear-gradient(90deg,#00e6a6 60%,#1976D2 100%); color: #fff; border: none;">
                                <i class="bi bi-stars"></i> Ask AI
                            </button>
                            <div class="vr mx-4 d-none d-md-block" style="height: 2.5rem;"></div>
                            <div class="d-flex align-items-center gap-2 ms-auto upload-section">
                                <input type="file" class="form-control d-none" id="csvFileInput" accept=".csv">
                                <label for="csvFileInput" id="csvLabel" class="btn btn-outline-secondary align-items-center gap-1 mb-0 rounded-pill px-3 py-2" style="background: linear-gradient(90deg,#fff 60%,#00e6a6 100%); border: 1.5px solid #00e6a6; max-width: 220px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    <i class="bi bi-upload"></i>
                                    <span id="csvLabelText" style="display: inline-block; vertical-align: middle;">Choose CSV</span>
                                </label>
                                <button type="button" class="btn btn-success d-flex align-items-center gap-1 rounded-pill px-4 py-2 fw-bold" id="importCsvBtn" style="box-shadow: 0 0 10px 2px #00e6a6aa;">
                                    <i class="bi bi-box-arrow-in-down"></i> Import
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex ms-auto">
                        <label class="small text-muted">
                            <input type="checkbox" name="checkBx" id="checkBx" @(Model?.mappings == null || Model.mappings.Count == 0 ? "disabled" : "") /> Re-use Existing Mapping
                        </label>
                        <a href="@Url.Action("Create", "Home")" class="btn btn-outline-danger ms-auto  d-flex align-items-center gap-1 px-4 py-2 fw-bold fs-5 rounded-pill ms-2" id="clearPageBtn" style="border-width: 2px;">
                            <i class="bi bi-eraser fs-4"></i> Clear
                        </a>
                    </div>
                    <span asp-validation-for="LLMType" class="text-danger mt-1 d-block"></span>
                    <div>
                        <div id="aiResponseArea" class="mb-2"></div>
                        <div id="importLoading" class=" mb-2"></div>
                    </div>
                </div>
            </div>
        </div>
        @* Metrics alert is always present but hidden if no metrics *@
        <div class="alert alert-info mb-3" id="metricsAlert" style="display:@((Model?.accuracyResult?.accuracyRate != null) ? "block" : "none")">

            @if (Model?.prompts != null && Model.prompts.Any())
            {
                <div class="section">
                    <h5>
                        Prompt History
                        <button type="button" id="historicalData" class="btn btn-link p-0 ms-3" title="View Historical Data" data-bs-toggle="tooltip" style="border:none; background:none;">
                            <span style="display:inline-block; background: linear-gradient(135deg, #6f42c1 30%, #0d6efd 100%); border-radius:50%; box-shadow:0 0 16px 4px #0d6efd77; width:40px; height:40px; position:relative; transition:box-shadow 0.3s;">
                                <i class="bi bi-file-earmark-text fs-3 text-white position-absolute top-50 start-50 translate-middle"></i>
                                <i class="bi bi-clock-fill fs-5 text-warning position-absolute bottom-0 end-0" style="z-index:3; transform:translate(25%,-25%);"></i>
                            </span>
                        </button>
                    </h5>

                    <!-- Historical Data Modal -->
                    <div class="modal fade" id="historicalDataModal" tabindex="-1" aria-labelledby="historicalDataModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-xl modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="historicalDataModalLabel">Historical Data Details</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div id="historicalDataDetails"></div>
                                    <!-- Historical data modal script in Scripts section below -->
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (Model?.promptHistory != null && Model.promptHistory.Any())
                    {
                        <ul>
                            @foreach (var entry in Model.promptHistory)
                            {
                                <li>
                                    <strong>@entry.text</strong>
                                    <small class="text-muted">(@entry.createdAt?.ToString("yyyy-MM-dd HH:mm:ss"))</small>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No prompt history available.</p>
                    }
                </div>
            }

            <div class="card shadow-sm border-0 mb-3 modern-metrics-card">
                <div class="card-body p-3">
                    <div class="row g-3 align-items-center">
                        <div class="col-12 col-md-4 text-center mb-3 mb-md-0">
                            <div class="display-5 fw-bold text-primary">
                                <i class="bi bi-graph-up-arrow"></i>
                                <span>@Html.DisplayFor(m => m.accuracyResult.accuracyRate)%</span>
                            </div>
                            <div class="fw-semibold">Overall Accuracy</div>
                            <span class="badge @(Model?.accuracyResult?.accuracyRate < 35 ? "bg-danger" : (Model?.accuracyResult?.accuracyRate < 70 ? "bg-warning text-dark" : "bg-success")) px-3 py-2 fs-6 mt-2">
                                @if (Model?.accuracyResult?.accuracyRate < 35)
                                {
                                    <i class="bi bi-emoji-frown"></i>
                                }
                                @if (Model?.accuracyResult?.accuracyRate >= 35 && Model?.accuracyResult?.accuracyRate < 70)
                                {
                                    <i class="bi bi-emoji-neutral"></i>
                                }
                                @if (Model?.accuracyResult?.accuracyRate >= 70)
                                {
                                    <i class="bi bi-emoji-smile"></i>
                                }
                                @Html.DisplayFor(m => m.accuracyResult.accuracyRate)%
                            </span>
                        </div>
                        <div class="col-12 col-md-8">
                            <div class="row g-2">
                                <div class="col-12 col-sm-6">
                                    <div class="metric-label">Description Similarity</div>
                                    <div class="metric-value">
                                        <i class="bi bi-file-earmark-text" data-bs-toggle="tooltip"
                                           title="Description similarity compares the meaning of descriptions across a mapping to see if the fields are likely to contain similar information"></i>
                                        <strong>@Html.DisplayFor(m => m.accuracyResult.descriptionSimilarity)%</strong>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6">
                                    <div class="metric-label">MIMOSA Similarity</div>
                                    <div class="metric-value">
                                        <i class="bi bi-diagram-3" data-bs-toggle="tooltip"
                                           title="Mimosa similarity compares the mimosa side of the mapping to to the schema to see if it is a valid field."></i>
                                        <strong>@Html.DisplayFor(m => m.accuracyResult.mimosaSimilarity)%</strong>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6">
                                    <div class="metric-label">Data Type Similarity</div>
                                    <div class="metric-value">
                                        <i class="bi bi-list-check" data-bs-toggle="tooltip"
                                           title="DataType compares the data type between mapped fields to see if they are likely to be able to contain similar data."></i>
                                        <strong>@Html.DisplayFor(m => m.accuracyResult.dataType)%</strong>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6">
                                    <div class="metric-label">SAP Similarity</div>
                                    <div class="metric-value">
                                        <i class="bi bi-diagram-2" data-bs-toggle="tooltip"
                                           title="SAP similarity compares the SAP side of the mapping to to the schema to see if it is a valid field"></i>
                                        <strong>@Html.DisplayFor(m => m.accuracyResult.sapSimilarity)%</strong>
                                    </div>
                                </div>
                                @* <div class="col-12 col-sm-6"> *@
                                @*     <div class="metric-label">Field Length Similarity</div> *@
                                @*     <div class="metric-value"><i class="bi bi-arrows-expand"></i> <strong>@Html.DisplayFor(m => m.accuracyResult.fieldLength)%</strong></div> *@
                                @* </div> *@
                                <div class="col-12 col-sm-6">
                                    <div class="metric-label">Missing Fields Rate</div>
                                    <div class="metric-value">
                                        <i class="bi bi-exclamation-circle" data-bs-toggle="tooltip"
                                           title="InfoOmitted checks if there is any missing fields/mapping pair in the mapping."></i>
                                        <strong>@Html.DisplayFor(m => m.accuracyResult.infoOmitted)%</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mapping Pairs</h5>
                <div class="d-flex align-items-center gap-2">

                    <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
                </div>
            </div>

            @if (Model?.mappings != null && Model.mappings.Count > 0)
            {
                <div class="card-body" id="mappingsContainer" style="max-height: 800px; overflow-y: auto;">
                    @{
                        var mappingIndex = 0;
                        // Pass accuracySingleMappingPair to the partial via ViewData
                        ViewData["AccuracyaccuracySingleMappingPair"] = Model.accuracySingleMappingPair;
                        foreach (var mapping in Model.mappings)
                        {
                            @await Html.PartialAsync("_MappingPair", Tuple.Create(mappingIndex, mapping), new ViewDataDictionary(ViewData))
                            mappingIndex++;
                        }
                    }
                </div>
            }
        </div>

        @* <input type="hidden" asp-for="prompt" /> *@
        @* <input type="hidden" asp-for="LLMType" /> *@
        <input type="hidden" asp-for="createdAt" />
        <input type="hidden" asp-for="accuracyResult.accuracyRate" />
        <input type="hidden" asp-for="accuracyResult.descriptionSimilarity" />
        <input type="hidden" asp-for="accuracyResult.mimosaSimilarity" />
        <input type="hidden" asp-for="accuracyResult.sapSimilarity" />
        <input type="hidden" asp-for="accuracyResult.dataType" />
        <input type="hidden" asp-for="accuracyResult.fieldLength" />
        <input type="hidden" asp-for="accuracyResult.infoOmitted" />
        <input type="hidden" id="prompts" asp-for="prompts" value="@(Model?.prompts != null ? string.Join(",", Model.prompts) : "")" />

        <!-- Hidden promptHistory -->
        @{
            var promptHistoryJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model?.promptHistory ?? new List<SAP_MIMOSAapp.Models.promptEntry>());
        }
        <input type="hidden" id="promptHistoryJson" name="promptHistoryJson" value='@promptHistoryJson' />

        <!-- Hidden accuracySingleMappingPair -->
        @{
            var accuracySingleMappingPairJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model?.accuracySingleMappingPair ?? new List<SAP_MIMOSAapp.Models.AccuracyResultViewModel>());
        }
        <input type="hidden" id="accuracySingleMappingPairJson" name="accuracySingleMappingPairJson" value='@accuracySingleMappingPairJson' />

        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="submit" class="btn btn-primary" @(Model?.mappings == null || Model.mappings.Count == 0 ? "disabled" : "")>Create</button>
        </div>
    </form>
</div>

@section Scripts {

    <!-- Template for mapping pair for JS to clone and insert blank mapping rows dynamically -->
    <script type="text/template" id="mappingPairTemplate">
        @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
    </script>

    <script>

        // Check box changes placeholder text of 'Prompt' input
        const mappingCheckBx = document.getElementById('checkBx');
        const aiPrompt = document.getElementById('aiPrompt');

        mappingCheckBx.addEventListener('change', () => {
            aiPrompt.placeholder = mappingCheckBx.checked ? "Provide feedback to improve existing mapping" : "Enter prompt to generate initial mapping";
        });


        // --- AI Assistant logic ---
        document.addEventListener('DOMContentLoaded', () => {
            const aiPrompt = document.getElementById('aiPrompt');
            const aiLLMType = document.getElementById('aiLLMType');
            const askAiBtn = document.getElementById('askAiBtn');
            const aiResponseArea = document.getElementById('aiResponseArea');


            // Ask AI button
            askAiBtn?.addEventListener('click', async () => {
                aiResponseArea.innerHTML = '';
                const prompt = aiPrompt.value.trim();
                const llmType = aiLLMType.value;
                const useExisting = document.getElementById('checkBx').checked;

                // Alert when click AskAI btn and  llmtype and prompt are empty
                if (!prompt || !llmType) {
                    aiResponseArea.innerHTML = `<div class="alert alert-danger">${!prompt ? 'Please enter a prompt.' : ''}
                    ${!prompt && !llmType ? '<br>' : ''}${!llmType ? 'Please select a model.' : ''}</div>`;
                    return;
                }


                const requestBody = { prompt, llmType };

                // Always collect existing promptHistory from the current model (whether reusing or not)
                const promptHistoryInput = document.getElementById('promptHistoryJson');
                let existingPromptHistory = [];
                if (promptHistoryInput && promptHistoryInput.value) {
                    try {
                        existingPromptHistory = JSON.parse(promptHistoryInput.value);
                    } catch (e) {
                        console.warn('Failed to parse existing promptHistory:', e);
                        existingPromptHistory = [];
                    }
                }

                // If "Use Existing Mapping" checkbox is checked, collect existing mapping pairs and add in request
                if (useExisting) {
                    const mappings = [];
                    document.querySelectorAll('.mapping-pair').forEach(pair => {
                        const getValue = name => pair.querySelector(`[name*="${name}"]`)?.value || "";

                        mappings.push({
                            sap: {
                                platform: getValue('sap.platform'),
                                entityName: getValue('sap.entityName'),
                                fieldName: getValue('sap.fieldName'),
                                description: getValue('sap.description'),
                                dataType: getValue('sap.dataType'),
                                notes: getValue('sap.notes'),
                                fieldLength: getValue('sap.fieldLength'),
                            },
                            mimosa: {
                                platform: getValue('mimosa.platform'),
                                entityName: getValue('mimosa.entityName'),
                                fieldName: getValue('mimosa.fieldName'),
                                description: getValue('mimosa.description'),
                                dataType: getValue('mimosa.dataType'),
                                notes: getValue('mimosa.notes'),
                                fieldLength: getValue('mimosa.fieldLength'),
                            }
                        });
                    });

                    requestBody.mappings = mappings;
                    requestBody.promptHistory = existingPromptHistory;

                }else{
                    requestBody.promptHistory = [];
                }

                // Read existing prompts from hidden input
                const hiddenPromptInput = document.getElementById('prompts');
                let existingPrompts = hiddenPromptInput?.value?.split('\n').filter(p => p.trim()) || [];

                // Add the new prompt to history if improving existing mapping
                if (useExisting) {
                    existingPrompts.push(prompt);
                } else {
                    existingPrompts = [prompt];
                }
                // Update the hidden input value
                if (hiddenPromptInput) {
                    hiddenPromptInput.value = existingPrompts.join('\n');
                }
                requestBody.prompts = existingPrompts;


                // Send request to AI
                aiResponseArea.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden"></span></div>';
                try {
                    const resp = await fetch('/Home/AskAI', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify( requestBody )
                    });
                    const data = await resp.json();
                    if (data.success && data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else if (data.message) {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">' + data.message + '</div>';
                    } else {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">AI did not return a valid mapping.</div>';
                    }
                } catch (e) {
                    aiResponseArea.innerHTML = '<div class="alert alert-danger">Error communicating with AI: ' + e + '</div>';
                }
            });


            // --- Existing mapping  logic ---
            // Attach remove event to a mapping pair
            const attachRemoveHandler = el => {
                el.querySelector('.remove-mapping')?.addEventListener('click', () => {
                    el.remove();
                    renumberMappings();
                });
            };

            // Renumber mapping input names for proper model binding. e.g. use this method to update indexes when update imported mapping pairs
            const renumberMappings = () => {
                document.querySelectorAll('.mapping-pair').forEach((pair, idx) => {
                    pair.querySelectorAll('input, textarea').forEach(field => {
                        field.name = field.name.replace(/mappings\[\d+\]/g, `mappings[${idx}]`);
                    });
                });
            };

            let mappingIndex = @(Model?.mappings != null ? Model.mappings.Count : 0);
            const mappingsContainer = document.getElementById('mappingsContainer');
            const template = document.getElementById('mappingPairTemplate').textContent;

            // Attach remove handler to all mapping pairs
            document.querySelectorAll('.mapping-pair').forEach(attachRemoveHandler);

            // Add new mapping pair button
            document.getElementById('addMapping').addEventListener('click', () => {
                addMappingPair();
                renumberMappings();
            });

            // Add a new mapping pair
            function addMappingPair(mappingData) {
                const newMapping = template.replace(/\[@Model\.Item1\]|\[-1\]/g, `[${mappingIndex}]`);
                const mappingElement = document.createElement('div');
                mappingElement.innerHTML = newMapping;
                attachRemoveHandler(mappingElement);
                if (mappingData) {
                    ["sap", "mimosa"].forEach(type => {
                        ["entityName", "fieldName", "dataType", "description", "fieldLength", "notes", "platform"].forEach(field => {
                            // Handle both inputs and textareas
                            const input = mappingElement.querySelector(`[name$=\".${type}.${field}\"]`);
                            if (input && mappingData[type] && mappingData[type][field] !== undefined) {
                                if (input.tagName.toLowerCase() === 'textarea') {
                                    input.textContent = mappingData[type][field];
                                } else {
                                    input.value = mappingData[type][field];
                                }
                            }
                        });
                    });
                    const allSapFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.sap?.[f] || '').trim() !== '');
                    const allMimosaFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.mimosa?.[f] || '').trim() !== '');
                    if (!allSapFilled && !allMimosaFilled) return;
                }
                mappingsContainer.appendChild(mappingElement);
                mappingIndex++;
            }

             // --- CSV Import logic ---
            document.getElementById('importCsvBtn')?.addEventListener('click', event => {
                event.preventDefault();
                const fileInput = document.getElementById('csvFileInput');
                if (!fileInput.files.length) {return importLoading.innerHTML = '<div class="alert alert-danger">Please select a CSV file.</div>';}
                const formData = new FormData();
                formData.append('csvFile', fileInput.files[0]);
                importLoading.innerHTML = '<div class="spinner-border text-success" role="status"><span class="visually-hidden"></span></div>';
                fetch('/Home/ImportCsv', { method: 'POST', body: formData })
                    .then(resp => resp.ok ? resp.json() : Promise.reject('Failed to import CSV.'))
                    .then(data => {
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            alert('Invalid response from server.');
                        }
                    })
                    .catch(error => alert('Error importing CSV: ' + error));
            });

            // Display file name of imported file
            const fileInput = document.getElementById('csvFileInput');
            const labelSpan = document.getElementById('csvLabel');

            fileInput.addEventListener('change', function () {
                if (this.files.length > 0) {
                    labelSpan.textContent = this.files[0].name;
                    labelSpan.title = this.files[0].name;
                } else {
                    labelSpan.textContent = "Choose CSV";
                }
            });
        });
    </script>

    <!-- Historical data modal -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Historical Data Modal: show and fetch logic
            const historicalDataModal = document.getElementById('historicalDataModal');
            if (historicalDataModal) {
                historicalDataModal.addEventListener('show.bs.modal', async function () {
                    const detailsDiv = document.getElementById('historicalDataDetails');
                    detailsDiv.innerHTML = '<div class="text-center text-muted py-4">Loading...</div>';
                    try {
                        const resp = await fetch('/Home/FetchHistoricalData');
                        const data = await resp.json();
                        if (!data || data.length === 0) {
                            detailsDiv.innerHTML = `
                                <div class="text-center text-muted py-4">
                                    <i class="bi bi-clock-history fs-1 text-primary mb-2"></i>
                                    <div>No historical data to display yet.</div>
                                </div>`;
                            return;
                        }
                        // Sort newest first by createdAt
                        data.sort((a, b) => {
                            const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);
                            const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);
                            return dateB - dateA;
                        });
                        let html = '';
                        data.forEach((entry, i) => {
                            const collapseId = `systemMappingContent${i}`;

                            let badgeClass = 'bg-success';
                            let emoji = '<i class="bi bi-emoji-smile"></i>';
                            if (entry.accuracyRate < 35) {
                                badgeClass = 'bg-danger';
                                emoji = '<i class="bi bi-emoji-frown"></i>';
                            } else if (entry.accuracyRate < 70) {
                                badgeClass = 'bg-warning text-dark';
                                emoji = '<i class="bi bi-emoji-neutral"></i>';
                            }
                            html += `
                                <div class="mb-4">
                                    <h6 class="fw-bold mb-1 d-flex justify-content-between align-items-center toggle-heading"
                                        data-bs-toggle="collapse"
                                        href="#${collapseId}"
                                        role="button"
                                        aria-expanded="false"
                                        aria-controls="${collapseId}">
                                        <span class="d-flex align-items-center">
                                            <i class="bi bi-chevron-right me-2 toggle-icon"></i>
                                            <span class="fw-semibold text-dark me-2">${entry.prompt ? entry.prompt : '(No prompt)'}</span>
                                            <span class="badge ms-1 ${entry.accuracyResult && entry.accuracyResult.accuracyRate >= 70 ? 'bg-success' : entry.accuracyResult && entry.accuracyResult.accuracyRate >= 35 ? 'bg-warning text-dark' : 'bg-danger'}"
                                                style="font-size:1em; min-width:48px;">${entry.accuracyResult && entry.accuracyResult.accuracyRate !== undefined && entry.accuracyResult.accuracyRate !== null ? entry.accuracyResult.accuracyRate + '%' : 'N/A'}
                                            </span>
                                        </span>
                                        <span class="d-flex align-items-center px-2 py-1 rounded bg-light border" style="font-size:0.95em;">
                                            <small class="text-secondary">${entry.createdAt ? new Date(entry.createdAt).toLocaleString() : 'N/A'}</small>
                                            <span class="mx-1 text-secondary">|</span>
                                            <small class="text-secondary">${entry.LLMType || ''}</small>
                                        </span>
                                    </h6>


                                    <div class="collapse" id="${collapseId}">
                                        <div class="card shadow-sm border-0 mb-3 modern-metrics-card">
                                            <div class="card-body p-3">
                                                <div class="row g-3 align-items-center">
                                                    <div class="col-12 col-md-4 text-center mb-3 mb-md-0">
                                                        <div class="display-5 fw-bold text-primary">
                                                            <i class="bi bi-graph-up-arrow"></i>
                                                            <span>${entry.accuracyResult && entry.accuracyResult.accuracyRate !== undefined && entry.accuracyResult.accuracyRate !== null ? entry.accuracyResult.accuracyRate : 'N/A'}%</span>
                                                        </div>
                                                        <div class="fw-semibold">Overall Accuracy</div>
                                                        <span class="badge ${badgeClass} px-3 py-2 fs-6 mt-2">
                                                            ${emoji}
                                                            ${entry.accuracyResult && entry.accuracyResult.accuracyRate !== undefined && entry.accuracyResult.accuracyRate !== null ? entry.accuracyResult.accuracyRate : 'N/A'}%
                                                        </span>
                                                    </div>
                                                    <div class="col-12 col-md-8">
                                                        <div class="row g-2">
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">Description Similarity</div>
                                                                <div class="metric-value"><i class="bi bi-file-earmark-text"></i> <strong>${entry.accuracyResult && entry.accuracyResult.descriptionSimilarity !== undefined && entry.accuracyResult.descriptionSimilarity !== null ? entry.accuracyResult.descriptionSimilarity : 'N/A'}%</strong></div>
                                                            </div>
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">MIMOSA Similarity</div>
                                                                <div class="metric-value"><i class="bi bi-diagram-3"></i> <strong>${entry.accuracyResult && entry.accuracyResult.mimosaSimilarity !== undefined && entry.accuracyResult.mimosaSimilarity !== null ? entry.accuracyResult.mimosaSimilarity : 'N/A'}%</strong></div>
                                                            </div>
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">Data Type Similarity</div>
                                                                <div class="metric-value"><i class="bi bi-list-check"></i> <strong>${entry.accuracyResult && entry.accuracyResult.dataType !== undefined && entry.accuracyResult.dataType !== null ? entry.accuracyResult.dataType : 'N/A'}%</strong></div>
                                                            </div>
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">SAP Similarity</div>
                                                                <div class="metric-value"><i class="bi bi-diagram-2"></i> <strong>${entry.accuracyResult && entry.accuracyResult.sapSimilarity !== undefined && entry.accuracyResult.sapSimilarity !== null ? entry.accuracyResult.sapSimilarity : 'N/A'}%</strong></div>
                                                            </div>
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">Field Length Similarity</div>
                                                                <div class="metric-value"><i class="bi bi-arrows-expand"></i> <strong>${entry.accuracyResult && entry.accuracyResult.fieldLength !== undefined && entry.accuracyResult.fieldLength !== null ? entry.accuracyResult.fieldLength : 'N/A'}%</strong></div>
                                                            </div>
                                                            <div class="col-12 col-sm-6">
                                                                <div class="metric-label">Missing Fields Rate</div>
                                                                <div class="metric-value"><i class="bi bi-exclamation-circle"></i> <strong>${entry.accuracyResult && entry.accuracyResult.infoOmitted !== undefined && entry.accuracyResult.infoOmitted !== null ? entry.accuracyResult.infoOmitted : 'N/A'}%</strong></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card mb-4">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <h5>Mapping Pairs</h5>
                                            </div>
                                            ${Array.isArray(entry.mappings) && entry.mappings.length > 0 ?
                                                `<div class="card-body" style="max-height: 800px; overflow-y: auto;">` +
                                                entry.mappings.map((m, idx) => {
                                                    let pairAcc = (entry.accuracySingleMappingPair && entry.accuracySingleMappingPair[idx]) || null;
                                                    return `
                                                        <div class="card mb-3 shadow-sm">
                                                            <div class="card-body">
                                                                <div class="row">
                                                                    <div class="col-md-6 border-end">
                                                                        <h6 class="fw-bold text-primary mb-2">SAP</h6>
                                                                        <div><strong>Entity:</strong> ${m.sap.entityName || ''}</div>
                                                                        <div><strong>Field:</strong> ${m.sap.fieldName || ''}</div>
                                                                        <div><strong>Description:</strong> ${m.sap.description || ''}</div>
                                                                        <div><strong>Type:</strong> ${m.sap.dataType || ''}</div>
                                                                        <div><strong>Length:</strong> ${m.sap.fieldLength || ''}</div>
                                                                        <div><strong>Notes:</strong> ${m.sap.notes || ''}</div>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <h6 class="fw-bold text-success mb-2">MIMOSA</h6>
                                                                        <div><strong>Entity:</strong> ${m.mimosa.entityName || ''}</div>
                                                                        <div><strong>Field:</strong> ${m.mimosa.fieldName || ''}</div>
                                                                        <div><strong>Description:</strong> ${m.mimosa.description || ''}</div>
                                                                        <div><strong>Type:</strong> ${m.mimosa.dataType || ''}</div>
                                                                        <div><strong>Length:</strong> ${m.mimosa.fieldLength || ''}</div>
                                                                        <div><strong>Notes:</strong> ${m.mimosa.notes || ''}</div>
                                                                    </div>
                                                                </div>
                                                                <div class="row mt-3">
                                                                    <div class="col-12">
                                                                        <div class="bg-light rounded p-2">
                                                                            <span class="fw-semibold">Pair Accuracy Metrics:</span><br>
                                                                            ${pairAcc ? `
                                                                                <div class="mt-2 pt-2 accuracy-details-metrics">
                                                                                    <div class="row g-1">
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-file-earmark-text"></i> Desc. Sim.</span>
                                                                                                <span class="metric-value">${pairAcc.descriptionSimilarity !== undefined && pairAcc.descriptionSimilarity !== null ? pairAcc.descriptionSimilarity : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-diagram-2"></i> SAP Sim.</span>
                                                                                                <span class="metric-value">${pairAcc.sapSimilarity !== undefined && pairAcc.sapSimilarity !== null ? pairAcc.sapSimilarity : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-diagram-3"></i> MIMOSA Sim.</span>
                                                                                                <span class="metric-value">${pairAcc.mimosaSimilarity !== undefined && pairAcc.mimosaSimilarity !== null ? pairAcc.mimosaSimilarity : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-list-check"></i> Data Type</span>
                                                                                                <span class="metric-value">${pairAcc.dataType !== undefined && pairAcc.dataType !== null ? pairAcc.dataType : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-exclamation-circle"></i> Mis. Field</span>
                                                                                                <span class="metric-value">${pairAcc.infoOmitted !== undefined && pairAcc.infoOmitted !== null ? pairAcc.infoOmitted : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="col-6 col-md-4 mb-1">
                                                                                            <div class="accuracy-metric-box">
                                                                                                <span class="metric-label"><i class="bi bi-arrows-expand"></i> Field Len.</span>
                                                                                                <span class="metric-value">${pairAcc.fieldLength !== undefined && pairAcc.fieldLength !== null ? pairAcc.fieldLength : 'N/A'}%</span>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            ` : '<span class="text-muted">No pair accuracy results.</span>'}
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    `;
                                                }).join('') +
                                                `</div>` :
                                                `<div class="text-center text-muted">No mappings available.</div>`
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>`;
                        });
                        detailsDiv.innerHTML = html;
                    } catch (e) {
                        detailsDiv.innerHTML = `<div class="alert alert-danger">Failed to load historical data.</div>`;
                    }
                });
            }
            // Historical data Modal open handler
            const historicalDataBtn = document.getElementById('historicalData');
            if (historicalDataBtn) {
                historicalDataBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    var modal = new bootstrap.Modal(document.getElementById('historicalDataModal'));
                    modal.show();
                });
            }
        });
    </script>
}