@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Create Mapping";
}

<div class="container mt-4">
    <h2>Create New Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    @* Metrics alert is always present but hidden if no metrics *@
    <div class="alert alert-info mb-3" id="metricsAlert" style="display:@((Model?.accuracyRate != null || Model?.qualityRate != null || Model?.matchingRate != null) ? "block" : "none")">
        Accuracy: <strong>@Html.DisplayFor(m => m.accuracyRate)%</strong> <br />
        Quality: <strong>@Html.DisplayFor(m => m.qualityRate)%</strong> <br />
        Matching: <strong>@Html.DisplayFor(m => m.matchingRate)%</strong>
    </div>

    <div class="alert alert-warning" id="promptAlert" style="display:@(!string.IsNullOrWhiteSpace(Model?.prompt) ? "block" : "none")">
        <strong>Prompt:</strong> @Model?.prompt
    </div>

    <form asp-action="Create" method="post">
        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success">@ViewBag.SuccessMessage</div>
        }
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <input asp-for="prompt" type="text" id="aiPrompt" class="form-control" placeholder="Enter for initial mapping" style="max-width: 450px;" />
                        <select asp-for="LLMType" id="aiLLMType" class="form-select" style="max-width: 150px;">
                            @foreach (var item in SAP_MIMOSAapp.Models.SearchViewModel.AvailableLLMs)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <button type="button" class="btn  btn-primary" id="askAiBtn">Ask AI</button>
                        <div class="d-flex align-items-center gap-2 ms-auto">
                            <div class="input-group input-group-sm" style="width: auto;">
                                <input type="file" class="form-control d-none" id="csvFileInput" accept=".csv">
                                <label for="csvFileInput" id="csvLabel" class="btn btn-outline-secondary d-flex align-items-center gap-1 mb-0">
                                    <i class="bi bi-upload"></i> <span>Choose CSV</span>
                                </label>
                            </div>

                            <button type="button" class="btn btn-success d-flex align-items-center gap-1" id="importCsvBtn">Import</button>
                        </div>
                    </div>
                    <div>
                        <label class="small text-muted">
                            <input type="checkbox" name="checkBx" id="checkBx" /> Use Existing Mapping
                        </label>
                    </div>
                    <span asp-validation-for="LLMType" class="text-danger mt-1 d-block"></span>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mapping Pairs</h5>
                <div class="d-flex align-items-center gap-2">

                    <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
                </div>
            </div>
            <div class="card-body" id="mappingsContainer" style="max-height: 800px; overflow-y: auto;">

                <div id="aiResponseArea" class="mb-2"></div>
                @{
                    var mappingIndex = 0;
                    if (Model?.mappings != null && Model.mappings.Count > 0)
                    {
                        foreach (var mapping in Model.mappings)
                        {
                            // Render all existing mappings when the page loads,
                            // such as when editing or after a failed form submission.
                            @await Html.PartialAsync("_MappingPair", Tuple.Create(mappingIndex, mapping))
                            mappingIndex++;
                        }
                    }
                }

            </div>
        </div>

        @* <input type="hidden" asp-for="prompt" /> *@
        @* <input type="hidden" asp-for="LLMType" /> *@
        @* <input type="hidden" asp-for="accuracyRate" /> *@
        @* <input type="hidden" asp-for="qualityRate" /> *@
        @* <input type="hidden" asp-for="matchingRate" /> *@
        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </form>
</div>

@section Scripts {

    <!-- Template for mapping pair for JS to clone and insert blank mapping rows dynamically -->
    <script type="text/template" id="mappingPairTemplate">
        @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
    </script>

    <script>

        // Change placeholder text based on check box
        const mappingCheckBx = document.getElementById('checkBx');
        const aiPrompt = document.getElementById('aiPrompt');

        mappingCheckBx.addEventListener('change', () => {
            aiPrompt.placeholder = mappingCheckBx.checked ? "Provide feedback to improve existing mapping" : "Enter for initial mapping";
        });

        // Display file name of imported file
        const fileInput = document.getElementById('csvFileInput');
        const labelSpan = document.getElementById('csvLabel');

        fileInput.addEventListener('change', function () {
            if (this.files.length > 0) {
                labelSpan.textContent = this.files[0].name;
            } else {
                labelSpan.textContent = "Choose CSV";
            }
        });
        document.addEventListener('DOMContentLoaded', () => {
            // --- AI Assistant logic ---
            const aiPrompt = document.getElementById('aiPrompt');
            const aiLLMType = document.getElementById('aiLLMType');
            const askAiBtn = document.getElementById('askAiBtn');
            const aiResponseArea = document.getElementById('aiResponseArea');            


            askAiBtn?.addEventListener('click', async () => {
                aiResponseArea.innerHTML = '';
                const prompt = aiPrompt.value.trim();
                const llmType = aiLLMType.value;
                if (!prompt) {
                    aiResponseArea.innerHTML = '<div class="alert alert-warning">Please enter a prompt for the AI.</div>';
                    return;
                }                
                aiResponseArea.innerHTML = '<div class="text-danger">Mapping Loading...</div>';
                try {                  
                    const resp = await fetch('/Home/AskAI', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ prompt, llmType })
                    });
                    const data = await resp.json();
                    if (data.success && data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else if (data.message) {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">' + data.message + '</div>';
                    } else {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">AI did not return a valid mapping.</div>';
                    }
                } catch (e) {
                    aiResponseArea.innerHTML = '<div class="alert alert-danger">Error communicating with AI: ' + e + '</div>';
                }
            });


            // --- Existing mapping logic below ---
            // Utility: Attach remove event to a mapping pair
            const attachRemoveHandler = el => {
                el.querySelector('.remove-mapping')?.addEventListener('click', () => {
                    el.remove();
                    renumberMappings();
                });
            };

            // Renumber mapping input names for proper model binding
            const renumberMappings = () => {
                document.querySelectorAll('.mapping-pair').forEach((pair, idx) => {
                    pair.querySelectorAll('input, textarea').forEach(field => {
                        field.name = field.name.replace(/mappings\[\d+\]/g, `mappings[${idx}]`);
                    });
                });
            };

            let mappingIndex = @(Model?.mappings != null ? Model.mappings.Count : 0);
            const mappingsContainer = document.getElementById('mappingsContainer');
            const template = document.getElementById('mappingPairTemplate').textContent;

            // Attach remove handler to all mapping pairs rendered on page load
            document.querySelectorAll('.mapping-pair').forEach(attachRemoveHandler);

            // Add mapping button
            document.getElementById('addMapping').addEventListener('click', () => {
                addMappingPair();
                renumberMappings();
            });

            // CSV import button
            document.getElementById('importCsvBtn')?.addEventListener('click', event => {
                event.preventDefault();
                const fileInput = document.getElementById('csvFileInput');
                if (!fileInput.files.length) return alert('Please select a CSV file.');
                const formData = new FormData();
                formData.append('csvFile', fileInput.files[0]);
                fetch('/Home/ImportCsv', { method: 'POST', body: formData })
                    .then(resp => resp.ok ? resp.json() : Promise.reject('Failed to import CSV.'))
                    .then(data => {
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            alert('Invalid response from server.');
                        }
                    })
                    .catch(error => alert('Error importing CSV: ' + error));
            });

            // Add a new mapping pair (optionally prefilled)
            function addMappingPair(mappingData) {
                const newMapping = template.replace(/\[@Model\.Item1\]|\[-1\]/g, `[${mappingIndex}]`);
                const mappingElement = document.createElement('div');
                mappingElement.innerHTML = newMapping;
                attachRemoveHandler(mappingElement);
                if (mappingData) {
                    ["sap", "mimosa"].forEach(type => {
                        ["entityName", "fieldName", "dataType", "description", "fieldLength", "notes", "platform"].forEach(field => {
                            // Handle both inputs and textareas
                            const input = mappingElement.querySelector(`[name$=\".${type}.${field}\"]`);
                            if (input && mappingData[type] && mappingData[type][field] !== undefined) {
                                if (input.tagName.toLowerCase() === 'textarea') {
                                    input.textContent = mappingData[type][field];
                                } else {
                                    input.value = mappingData[type][field];
                                }
                            }
                        });
                    });
                    const allSapFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.sap?.[f] || '').trim() !== '');
                    const allMimosaFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.mimosa?.[f] || '').trim() !== '');
                    if (!allSapFilled && !allMimosaFilled) return;
                }
                mappingsContainer.appendChild(mappingElement);
                mappingIndex++;
            }
        });
    </script>
}