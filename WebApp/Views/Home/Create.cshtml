@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Create Mapping";
}

<div class="container mt-4">
    <h2>Create New Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    

    <form asp-action="Create" method="post">
        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success">@ViewBag.SuccessMessage</div>
        }
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <input asp-for="prompt" type="text" id="aiPrompt" class="form-control" placeholder="Enter for initial mapping" style="max-width: 450px;" />
                        <select asp-for="LLMType" id="aiLLMType" class="form-select" style="max-width: 150px;">
                            @foreach (var item in SAP_MIMOSAapp.Models.SearchViewModel.AvailableLLMs)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <button type="button" class="btn  btn-primary" id="askAiBtn">Ask AI</button>
                        <div class="d-flex align-items-center gap-2 ms-auto">
                            <div class="input-group input-group-sm" style="width: auto;">
                                <input type="file" class="form-control d-none" id="csvFileInput" accept=".csv">
                                <label for="csvFileInput" id="csvLabel" class="btn btn-outline-secondary d-flex align-items-center gap-1 mb-0">
                                    <i class="bi bi-upload"></i> <span>Choose CSV</span>
                                </label>
                            </div>

                            <button type="button" class="btn btn-success d-flex align-items-center gap-1" id="importCsvBtn">Import</button>
                        </div>
                    </div>
                    <div>
                        <label class="small text-muted">
                            <input type="checkbox" name="checkBx" id="checkBx" @(Model?.mappings == null || Model.mappings.Count == 0 ? "disabled" : "") /> Use Existing Mapping
                        </label>
                    </div>
                    <span asp-validation-for="LLMType" class="text-danger mt-1 d-block"></span>
                    <div id="aiResponseArea" class="mb-2"></div>
                </div>
            </div>
        </div>
        @* Metrics alert is always present but hidden if no metrics *@
        <div class="alert alert-info mb-3" id="metricsAlert" style="display:@((Model?.accuracyRate != null) ? "block" : "none")">
            <div class="section"><strong>Prompt:</strong> @Model?.prompt</div>
            Overall Accuracy: <span class="badge @(Model?.accuracyRate < 35 ? "bg-danger" : (Model?.accuracyRate < 70 ? "bg-warning text-dark" : "bg-success"))">
                <strong>@Html.DisplayFor(m => m.accuracyRate)%</strong></span> <br />
            Description Similarity: <strong>@Html.DisplayFor(m => m.descriptionSimilarity)%</strong> <br />
            MIMOSA Similiraty: <strong>@Html.DisplayFor(m => m.mimosaSimilarity)%</strong><br />
            SAP Similiraty: <strong>@Html.DisplayFor(m => m.sapSimilarity)%</strong><br />
            Data type similarity: <strong>@Html.DisplayFor(m => m.dataType)%</strong><br />
            Missing fields rate: <strong>@Html.DisplayFor(m => m.infoOmitted)%</strong><br />
            Field length similarity: <strong>@Html.DisplayFor(m => m.fieldLength)%</strong><br />
        </div>
        
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mapping Pairs</h5>
                <div class="d-flex align-items-center gap-2">

                    <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
                </div>
            </div>

            @if (Model?.mappings != null && Model.mappings.Count > 0)
            {
                <div class="card-body" id="mappingsContainer" style="max-height: 800px; overflow-y: auto;">
                    @{
                        var mappingIndex = 0;
                        foreach (var mapping in Model.mappings)
                        {
                            // Render all existing mappings when the page loads,
                            // such as when editing or after a failed form submission.
                            @await Html.PartialAsync("_MappingPair", Tuple.Create(mappingIndex, mapping))
                            mappingIndex++;
                        }
                    }
                </div>
            }
        </div>

        @* <input type="hidden" asp-for="prompt" /> *@
        @* <input type="hidden" asp-for="LLMType" /> *@
        <input type="hidden" asp-for="accuracyRate" />
        <input type="hidden" asp-for="descriptionSimilarity" />
        <input type="hidden" asp-for="mimosaSimilarity" />
        <input type="hidden" asp-for="sapSimilarity" />
        <input type="hidden" asp-for="dataType" />
        <input type="hidden" asp-for="fieldLength" />
        <input type="hidden" asp-for="infoOmitted" />
        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </form>
</div>

@section Scripts {

    <!-- Template for mapping pair for JS to clone and insert blank mapping rows dynamically -->
    <script type="text/template" id="mappingPairTemplate">
        @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
    </script>

    <script>

        // Check box changes placeholder text of 'Prompt' input
        const mappingCheckBx = document.getElementById('checkBx');
        const aiPrompt = document.getElementById('aiPrompt');

        mappingCheckBx.addEventListener('change', () => {
            aiPrompt.placeholder = mappingCheckBx.checked ? "Provide feedback to improve existing mapping" : "Enter for initial mapping";
        });


        // --- AI Assistant logic ---
        document.addEventListener('DOMContentLoaded', () => {
            const aiPrompt = document.getElementById('aiPrompt');
            const aiLLMType = document.getElementById('aiLLMType');
            const askAiBtn = document.getElementById('askAiBtn');
            const aiResponseArea = document.getElementById('aiResponseArea');

            // Ask AI button
            askAiBtn?.addEventListener('click', async () => {
                aiResponseArea.innerHTML = '';
                const prompt = aiPrompt.value.trim();
                const llmType = aiLLMType.value;
                const useExisting = document.getElementById('checkBx').checked;

                if (!prompt) {
                    aiResponseArea.innerHTML = '<div class="alert alert-warning">Please enter a prompt for the AI.</div>';
                    return;
                }

                const requestBody = { prompt, llmType };

                // If "Use Existing Mapping" checkbox is checked, collect existing mapping pairs and add in request
                if (useExisting) {
                    const mappings = [];
                    document.querySelectorAll('.mapping-pair').forEach(pair => {
                        const mapping = {
                            sap: {
                                // Operator '*' means contains, finding elements whose names might include some prefix/suffix, not just exact matching
                                platform: pair.querySelector('[name*="sap.platform"]').value,
                                entityName: pair.querySelector('[name*="sap.entityName"]').value,
                                fieldName: pair.querySelector('[name*="sap.fieldName"]').value,
                                description: pair.querySelector('[name*="sap.description"]').value,
                                dataType: pair.querySelector('[name*="sap.dataType"]').value,
                                notes: pair.querySelector('[name*="sap.notes"]').value || "",
                                fieldLength: pair.querySelector('[name*="sap.fieldLength"]').value || ""
                            },
                            mimosa: {
                                platform: pair.querySelector('[name*="mimosa.platform"]').value,
                                entityName: pair.querySelector('[name*="mimosa.entityName"]').value,
                                fieldName: pair.querySelector('[name*="mimosa.fieldName"]').value,
                                description: pair.querySelector('[name*="mimosa.description"]').value,
                                dataType: pair.querySelector('[name*="mimosa.dataType"]').value,
                                notes: pair.querySelector('[name*="mimosa.notes"]').value || "",
                                fieldLength: pair.querySelector('[name*="mimosa.fieldLength"]').value || ""
                            }
                        };
                        mappings.push(mapping);
                    });

                    requestBody.mappings = mappings;
                }

                // Send request to AI
                aiResponseArea.innerHTML = '<div class="text-danger">Mapping Loading...</div>';
                try {
                    const resp = await fetch('/Home/AskAI', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify( requestBody )
                    });
                    const data = await resp.json();
                    if (data.success && data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else if (data.message) {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">' + data.message + '</div>';
                    } else {
                        aiResponseArea.innerHTML = '<div class="alert alert-danger">AI did not return a valid mapping.</div>';
                    }
                } catch (e) {
                    aiResponseArea.innerHTML = '<div class="alert alert-danger">Error communicating with AI: ' + e + '</div>';
                }
            });


            // --- Existing mapping  logic ---
            // Attach remove event to a mapping pair
            const attachRemoveHandler = el => {
                el.querySelector('.remove-mapping')?.addEventListener('click', () => {
                    el.remove();
                    renumberMappings();
                });
            };

            // Renumber mapping input names for proper model binding. e.g. use this method to update indexes when update imported mapping pairs
            const renumberMappings = () => {
                document.querySelectorAll('.mapping-pair').forEach((pair, idx) => {
                    pair.querySelectorAll('input, textarea').forEach(field => {
                        field.name = field.name.replace(/mappings\[\d+\]/g, `mappings[${idx}]`);
                    });
                });
            };

            let mappingIndex = @(Model?.mappings != null ? Model.mappings.Count : 0);
            const mappingsContainer = document.getElementById('mappingsContainer');
            const template = document.getElementById('mappingPairTemplate').textContent;

            // Attach remove handler to all mapping pairs
            document.querySelectorAll('.mapping-pair').forEach(attachRemoveHandler);

            // Add new mapping pair button
            document.getElementById('addMapping').addEventListener('click', () => {
                addMappingPair();
                renumberMappings();
            });

            // Add a new mapping pair
            function addMappingPair(mappingData) {
                const newMapping = template.replace(/\[@Model\.Item1\]|\[-1\]/g, `[${mappingIndex}]`);
                const mappingElement = document.createElement('div');
                mappingElement.innerHTML = newMapping;
                attachRemoveHandler(mappingElement);
                if (mappingData) {
                    ["sap", "mimosa"].forEach(type => {
                        ["entityName", "fieldName", "dataType", "description", "fieldLength", "notes", "platform"].forEach(field => {
                            // Handle both inputs and textareas
                            const input = mappingElement.querySelector(`[name$=\".${type}.${field}\"]`);
                            if (input && mappingData[type] && mappingData[type][field] !== undefined) {
                                if (input.tagName.toLowerCase() === 'textarea') {
                                    input.textContent = mappingData[type][field];
                                } else {
                                    input.value = mappingData[type][field];
                                }
                            }
                        });
                    });
                    const allSapFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.sap?.[f] || '').trim() !== '');
                    const allMimosaFilled = ["entityName", "fieldName", "dataType", "description"].every(f => (mappingData.mimosa?.[f] || '').trim() !== '');
                    if (!allSapFilled && !allMimosaFilled) return;
                }
                mappingsContainer.appendChild(mappingElement);
                mappingIndex++;
            }

             // --- CSV Import logic ---
            document.getElementById('importCsvBtn')?.addEventListener('click', event => {
                event.preventDefault();
                const fileInput = document.getElementById('csvFileInput');
                if (!fileInput.files.length) return alert('Please select a CSV file.');
                const formData = new FormData();
                formData.append('csvFile', fileInput.files[0]);
                fetch('/Home/ImportCsv', { method: 'POST', body: formData })
                    .then(resp => resp.ok ? resp.json() : Promise.reject('Failed to import CSV.'))
                    .then(data => {
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            alert('Invalid response from server.');
                        }
                    })
                    .catch(error => alert('Error importing CSV: ' + error));
            });

            // Display file name of imported file
            const fileInput = document.getElementById('csvFileInput');
            const labelSpan = document.getElementById('csvLabel');

            fileInput.addEventListener('change', function () {
                if (this.files.length > 0) {
                    labelSpan.textContent = this.files[0].name;
                } else {
                    labelSpan.textContent = "Choose CSV";
                }
            });
        });
    </script>
}