@model SAP_MIMOSAapp.Models.MappingDocument

@{
    ViewData["Title"] = "Create Mapping";
}

<div class="container mt-4">
    <h2>Create New Mapping</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    @* Show accuracy/quality/matching scores if present *@
    @if (Model?.accuracyRate != null || Model?.qualityRate != null || Model?.matchingRate != null)
    {
        <div class="alert alert-info mb-3">
            Accuracy: <strong>@Html.DisplayFor(m => m.accuracyRate)%</strong> <br />
            Quality: <strong>@Html.DisplayFor(m => m.qualityRate)%</strong> <br />
            Matching: <strong>@Html.DisplayFor(m => m.matchingRate)%</strong>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(Model?.prompt))
    {
        <div class="alert alert-warning">
            <strong>Prompt:</strong> @Model.prompt
        </div>
    }

    <form asp-action="Create" method="post">
        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success">@ViewBag.SuccessMessage</div>
        }
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mapping Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="mapID" class="form-label">Map ID</label>
                        <input asp-for="mapID" class="form-control form-text text-muted" readonly placeholder="Map ID will be auto-generated" value="@(string.IsNullOrEmpty(Model?.mapID) ? ViewBag.NextMapId : Model.mapID)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="LLMType" class="form-label">LLM Type</label>
                        @Html.DropDownListFor(model => model.LLMType, SAP_MIMOSAapp.Models.SearchViewModel.AvailableLLMs, new { @class = "form-select" })
                        <span asp-validation-for="LLMType" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Mappings</h5>
                <div class="d-flex align-items-center gap-2">
                    <input type="file" id="csvFileInput" accept=".csv" class="form-control form-control-sm" style="width: auto; display: inline-block;" />
                    <button type="button" class="btn btn-sm btn-secondary" id="importCsvBtn">Import CSV</button>
                    <button type="button" class="btn btn-sm btn-primary" id="addMapping">Add Mapping</button>
                </div>
            </div>
            <div class="card-body" id="mappingsContainer">

                @{
                    var mappingIndex = 0;
                    if (Model?.mappings != null && Model.mappings.Count > 0)
                    {
                        foreach (var mapping in Model.mappings)
                        {
                            // Render all existing mappings when the page loads, 
                            // such as when editing or after a failed form submission.
                            @await Html.PartialAsync("_MappingPair", Tuple.Create(mappingIndex, mapping))
                            mappingIndex++;
                        }
                    }
                }

            </div>
        </div>

        <input type="hidden" asp-for="prompt" />
        <input type="hidden" asp-for="accuracyRate" />
        <input type="hidden" asp-for="qualityRate" />
        <input type="hidden" asp-for="matchingRate" />
        <div class="d-flex justify-content-between mb-4">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </form>
</div>

@section Scripts {

    <!-- Template for mapping pair for JS to clone and insert blank mapping rows dynamically -->
    <script type="text/template" id="mappingPairTemplate">
        @await Html.PartialAsync("_MappingPair", Tuple.Create(-1, new SAP_MIMOSAapp.Models.MappingPair { sap = new SAP_MIMOSAapp.Models.MappingField(), mimosa = new SAP_MIMOSAapp.Models.MappingField() }))
    </script>

    <script>
            document.addEventListener('DOMContentLoaded', function() {
                let mappingIndex = @(Model?.mappings != null ? Model.mappings.Count : 0);
                const mappingsContainer = document.getElementById('mappingsContainer');
                const template = document.getElementById('mappingPairTemplate').textContent;

                // Add mapping button click handler
                document.getElementById('addMapping').addEventListener('click', function() {
                    addMappingPair();
                });

                // CSV import
                document.getElementById('importCsvBtn').addEventListener('click', function(event) {
                    event.preventDefault();
                    const fileInput = document.getElementById('csvFileInput');
                    if (!fileInput.files.length) {
                        alert('Please select a CSV file.');
                        return;
                    }
                    const formData = new FormData();
                    formData.append('csvFile', fileInput.files[0]);
                    fetch('/Home/ImportCsv', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to import CSV.');
                        return response.json();
                    })
                    .then(data => {
                        if (!Array.isArray(data)) {
                            alert('Invalid data returned from server.');
                            return;
                        }
                        // Remove existing mappings
                        mappingsContainer.innerHTML = '';
                        mappingIndex = 0;
                        // Add each mapping from CSV
                        data.forEach(function(mapping) {
                            addMappingPair(mapping);
                        });
                    })
                    .catch(error => {
                        alert('Error importing CSV: ' + error.message);
                    });
                });

                // Function to add a new mapping pair
                function addMappingPair(mappingData) {
                    let newMapping = template.replace(/\[-1\]/g, `[${mappingIndex}]`);
                    const mappingElement = document.createElement('div');
                    mappingElement.innerHTML = newMapping;
                    mappingElement.querySelector('.remove-mapping').addEventListener('click', function() {
                        mappingElement.remove();
                    });
                    // If mappingData is provided, prefill the fields
                    if (mappingData) {
                        const sapFields = ["entityName", "fieldName", "dataType", "description"];
                        const mimosaFields = ["entityName", "fieldName", "dataType", "description"];
                        let allFilled = true;
                        sapFields.forEach(field => {
                            const input = mappingElement.querySelector(`[name$=\".sap.${field}\"]`);
                            input.value = mappingData.sap?.[field] || '';
                            if (!input.value.trim()) allFilled = false;
                        });
                        mimosaFields.forEach(field => {
                            const input = mappingElement.querySelector(`[name$=\".mimosa.${field}\"]`);
                            input.value = mappingData.mimosa?.[field] || '';
                            if (!input.value.trim()) allFilled = false;
                        });
                        if (!allFilled) {
                            alert("All SAP and MIMOSA fields must be filled.");
                            return;
                        }
                    }
                    mappingsContainer.appendChild(mappingElement);
                    mappingIndex++;
                }
            });
    </script>
}